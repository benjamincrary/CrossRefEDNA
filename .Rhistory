library(usethis)
use_mit_license("Benjamin Crary")
use_readme_md()
set_end_date <- function() {
previous_month(Sys.Date())
}
set_end_date()
devtools::load_all()
set_end_date()
usethis::use_package("jsonlite")
previous_month()
previous_month <- function() {
z <- as.Date(format(Sys.Date, "%Y-%m-01")) - 1
date <- format(z, "%Y-%m")
return(date)
}
previous_month()
previous_month <- function() {
z <- as.Date(format(Sys.Date(), "%Y-%m-01")) - 1
date <- format(z, "%Y-%m")
return(date)
}
previous_month()
dlpyr::read_csv()
devtools::load_all()
use_package("readr")
use_package("purrr")
use_package("tidytext")
install.packages("idytext")
install.packages("tidytext")
use_package("tidytext")
use_package("stringr")
use_package("dplyr")
use_package("magrittr")
use_package("lubridae")
use_package("lubridate")
use_package("tidyr")
devtools::check()
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
use_package("jsonlite")
install.github("benjamincrary/CrossRefEDNA")
devtools::install.github("benjamincrary/CrossRefEDNA")
devtools::install_github("benjamincrary/CrossRefEDNA")
devtools::install_github("benjamincrary/CrossRefEDNA")
library(CrossRefEDNA)
getwd()
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
enddate <- previous_month()
#get initial query with nresutls (does not contain full results)
nquery <- create_n_results_query(enddate, email)
nquery <- create_n_results_query(previous_month(), "bcrary@limno.com")
nquery
#query crossREF with initial query to get n results
initial <- jsonlite::fromJSON(nquery)
use_package("jsonlite")
devtools::check()
devtools::install_github("benjamincrary/CrossRefEDNA")
library(CrossRefEDNA)
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
email <- "bcrary@limno.com"
q2 <- build_cr_loop_n(email)
q1 <- build_cr_loop_one(email)
fromJSON(q2, flatten=TRUE)
devtools::check()
devtools::install_github("benjamincrary/CrossRefEDNA")
library(CrossRefEDNA)
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
x <-  jsonlite:::fromJSON(q2, flatten=TRUE)
jsonlite:::fromJSON(q2, flatten=TRUE)
q2 <- build_cr_loop_n(email)
q2
x <-  jsonlite::fromJSON(paste0(q3, curs), flatten=TRUE)
x <-  jsonlite:::fromJSON(q1, flatten=TRUE)
x <-  jsonlite:::fromJSON(q1, flatten=TRUE)
x
check()
devtools::check()
devtools::install_github("benjamincrary/CrossRefEDNA")
devtools::install_github("benjamincrary/CrossRefEDNA")
library(CrossRefEDNA)
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
devtools::install_github("benjamincrary/CrossRefEDNA")
library(CrossRefEDNA)
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
for (i in loopseq) {
if(i == 1) {
x <-  jsonlite:::fromJSON(q1, flatten=TRUE)
curs <- x$message$`next-cursor`
curs <- gsub("\\+", "%2B", curs)
results <- jsonlite::rbind_pages(list(results, x$message$items))
} else {
x <-  jsonlite::fromJSON(paste0(q2, curs), flatten=TRUE)
curs <- x$message$`next-cursor`
curs <- gsub("\\+", "%2B", curs)
results <- jsonlite::rbind_pages(list(results, x$message$items))
print(i)
}
}
results <- NULL
loops <- query_n_loops(email)
loopseq <- seq(1:loops)
for (i in loopseq) {
if(i == 1) {
x <-  jsonlite:::fromJSON(q1, flatten=TRUE)
curs <- x$message$`next-cursor`
curs <- gsub("\\+", "%2B", curs)
results <- jsonlite::rbind_pages(list(results, x$message$items))
} else {
x <-  jsonlite::fromJSON(paste0(q2, curs), flatten=TRUE)
curs <- x$message$`next-cursor`
curs <- gsub("\\+", "%2B", curs)
results <- jsonlite::rbind_pages(list(results, x$message$items))
print(i)
}
}
devtools::check()
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
loops
str(results)
#2. filter
#filtered_edna <- filter_edna_results(results, destination)
filtered_edna <- readRDS("data/all_results_20200716/filtered_eDNA_201001-202006.rds")
bin_filtered_results(filtered_edna, "data/all_results_20200716/")
devtools::load_all()
bin_filtered_results(filtered_edna, "data/all_results_20200716/")
devtools::check()
setwd("C:/Users/bcrary/Desktop/ProjectArchives/EPRIarchive/QueryRebuild/CrossRefEDNA/R")
setwd("C:/Users/bcrary/Desktop/ProjectArchives/EPRIarchive/QueryRebuild/CrossRefEDNA")
file.copy("data/AllPubs.RDS", "data/")
file.copy("data/AllPubs.RDS", "data/AllPubs2.RDS")
setwd("C:/Users/bcrary/Desktop/ProjectArchives/EPRIarchive/QueryRebuild/CrossRefEDNA")
destination <- "data/"
inputfile <- "data/Input.RDS"
inputfile <- "Input.RDS"
inputs <- readRDS(paste0(destination, inputfile))
inputs
destination <- "data/all_results_20200716/"
inputs <- readRDS(paste0(destination, inputfile))
input <- readRDS(paste0(destination, "Input.RDS"))
input_backup <- readRDS(past0(destination), "Input_backup.RDS")
input_backup <- readRDS(paste0(destination), "Input_backup.RDS")
input_backup <- readRDS(paste0(destination), "Input_backup.RDS")
input_backup <- readRDS(paste0(destination, "Input_backup.RDS"))
head(input_backup)
rowstatus <- ifelse(nrow(input) <= nrow(input_backup), "fail", "pass")
rowstatus
datestatus <- ifelse(max(input$date) <= max(input_backup$date), "fail", "pass")
datestatus
input_status <- c(row_status, date_status)
row_status <- ifelse(nrow(input) <= nrow(input_backup), "fail", "pass")
date_status <- ifelse(max(input$date) <= max(input_backup$date), "fail", "pass")
input_status <- c(row_status, date_status)
input_status
input_status <- if(sum(combined_status$status == "fail") > 0, "fail", "pass")
combined_status <- data.frame(status = c(row_status, date_status))
sum(combined_status$status == "fail")
input_status <- ifelse(sum(combined_status$status == "fail") > 0, "fail", "pass")
input_status
check_udpated_inputs <- function(destination) {
input <- readRDS(paste0(destination, "Input.RDS"))
input_backup <- readRDS(paste0(destination, file, "Input_backup.RDS"))
row_status <- ifelse(nrow(input) <= nrow(input_backup), "fail", "pass")
date_status <- ifelse(max(input$date) <= max(input_backup$date), "fail", "pass")
combined_status <- data.frame(status = c(row_status, date_status))
input_status <- ifelse(sum(combined_status$status == "fail") > 0, "fail", "pass")
return(input_status)
}
check_udpated_inputs(destination)
input <- readRDS(paste0(destination, "Input.RDS"))
input_backup <- readRDS(paste0(destination, file, "Input_backup.RDS"))
input <- readRDS(paste0(destination, "Input.RDS"))
input_backup <- readRDS(paste0(destination, "Input_backup.RDS"))
check_udpated_inputs <- function(destination) {
input <- readRDS(paste0(destination, "Input.RDS"))
input_backup <- readRDS(paste0(destination, "Input_backup.RDS"))
row_status <- ifelse(nrow(input) <= nrow(input_backup), "fail", "pass")
date_status <- ifelse(max(input$date) <= max(input_backup$date), "fail", "pass")
combined_status <- data.frame(status = c(row_status, date_status))
input_status <- ifelse(sum(combined_status$status == "fail") > 0, "fail", "pass")
return(input_status)
}
check_udpated_inputs(destination)
check_udpated_publist <- function(destination) {
input <- readRDS(paste0(destination, "AllPubs.RDS"))
input_backup <- readRDS(paste0(destination, "AllPubs_backup.RDS"))
row_status <- ifelse(nrow(input) <= nrow(input_backup), "fail", "pass")
date_status <- ifelse(max(input$date) <= max(input_backup$date), "fail", "pass")
combined_status <- data.frame(status = c(row_status, date_status))
input_status <- ifelse(sum(combined_status$status == "fail") > 0, "fail", "pass")
return(input_status)
}
check_udpated_publist(destination)
input <- readRDS(paste0(destination, "AllPubs.RDS"))
input_backup <- readRDS(paste0(destination, "AllPubs_backup.RDS"))
row_status <- ifelse(nrow(input) <= nrow(input_backup), "fail", "pass")
date_status <- ifelse(max(input$date) <= max(input_backup$date), "fail", "pass")
head(input)
check_udpated_publist <- function(destination) {
input <- readRDS(paste0(destination, "AllPubs.RDS"))
input_backup <- readRDS(paste0(destination, "AllPubs_backup.RDS"))
row_status <- ifelse(nrow(input) <= nrow(input_backup), "fail", "pass")
date_status <- ifelse(max(input$`Publication Date`) <= max(input_backup$`Publication Date`), "fail", "pass")
combined_status <- data.frame(status = c(row_status, date_status))
input_status <- ifelse(sum(combined_status$status == "fail") > 0, "fail", "pass")
return(input_status)
}
check_udpated_publist(destination)
check_updates <- function(destination) {
i <- check_updated_inputs(destination)
p <- check_updated_publist(destination)
combined_status <- data.frame(status = c(i, p))
update_status <- ifelse(sum(combined_status$status == "fail") > 0, "fail", "pass")
}
check_updates(destination)
check_updated_inputs <- function(destination) {
input <- readRDS(paste0(destination, "Input.RDS"))
input_backup <- readRDS(paste0(destination, "Input_backup.RDS"))
row_status <- ifelse(nrow(input) <= nrow(input_backup), "fail", "pass")
date_status <- ifelse(max(input$date) <= max(input_backup$date), "fail", "pass")
combined_status <- data.frame(status = c(row_status, date_status))
input_status <- ifelse(sum(combined_status$status == "fail") > 0, "fail", "pass")
return(input_status)
}
check_updated_publist <- function(destination) {
input <- readRDS(paste0(destination, "AllPubs.RDS"))
input_backup <- readRDS(paste0(destination, "AllPubs_backup.RDS"))
row_status <- ifelse(nrow(input) <= nrow(input_backup), "fail", "pass")
date_status <- ifelse(max(input$`Publication Date`) <= max(input_backup$`Publication Date`), "fail", "pass")
combined_status <- data.frame(status = c(row_status, date_status))
input_status <- ifelse(sum(combined_status$status == "fail") > 0, "fail", "pass")
return(input_status)
}
check_updates(destination)
check_updates <- function(destination) {
i <- check_updated_inputs(destination)
p <- check_updated_publist(destination)
combined_status <- data.frame(status = c(i, p))
update_status <- ifelse(sum(combined_status$status == "fail") > 0, "fail", "pass")
return(update_status)
}
check_updates(destination)
log <- read.csv(paste0(destination, "UpdateLog.csv"))
View(log)
View(log)
head(log_)
head(log)
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
status <- check_updates(destination)
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
new_to_log
log <- rbind(log, new_to_log)
log
log <- rbind(log, new_to_log)
log
devtools::check()
devtools::load_all()
devtools::check()
x <- readRDS("data/Input.RDS")
x
devtools::load_all()
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
devtools::load_all()
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
devtools::load_all()
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
y <- Input.RDS
y <- readRDS("data/Input.RDS")
y
destination <- "data/"
backup <- "data/"
email <- "bcrary@limno.com"
#1. query
results <- query_crossref_edna(backup, email)
#2. filter
filtered_edna <- filter_edna_results(results, destination)
#3. bin
bin_filtered_results(filtered_edna, destination)
#4. check and update inputs
finalize_update(destination)
status <- check_updates(destination)
status
input <- readRDS(paste0(destination, "Input.RDS"))
input_backup <- readRDS(paste0(destination, "Input_backup.RDS"))
input_backup <- readRDS(paste0(destination, "Input_backup.RDS"))
pub_backup <- readRDS(paste0(destination, "AllPub_backup.RDS"))
pub_backup <- readRDS(paste0(destination, "AllPubs_backup.RDS"))
x <- readRDS("data/Input.RDS")
x
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
devtools::load_all()
update_edna_knowledge_center("data/", "data/", "bcrary@limno.com")
x
x <- readRDS("data/Input.RDS")
x
#1. query
results <- query_crossref_edna(backup, email)
#2. filter
filtered_edna <- filter_edna_results(results, destination)
#3. bin
bin_filtered_results(filtered_edna, destination)
filtered_edna
View(results)
q1 <- build_cr_loop_one(email)
q2 <- build_cr_loop_n(email)
q1
q2
devtools::load_all()
x <- readRDS("data/Input.RDS")
x
x <- readRDS("data/Input.RDS")
x
x <- readRDS("data/Input_backup.RDS")
x
x <- readRDS("data/Input.RDS")
devtools::load_all()
#1. query
results <- query_crossref_edna(backup, email)
#2. filter
filtered_edna <- filter_edna_results(results, destination)
#3. bin
bin_filtered_results(filtered_edna, destination)
View(input)
View(filtered_edna)
View(input)
View(input)
View(filtered_edna)
y <- readRDS("data/Input.RDS")
y
#4. check and update inputs
finalize_update(destination)
devtools::load_all()
#4. check and update inputs
finalize_update(destination)
status <- check_updates(destination)
if(status == "fail") {
input_backup <- readRDS(paste0(destination, "Input_backup.RDS"))
pub_backup <- readRDS(paste0(destination, "AllPubs_backup.RDS"))
saveRDS(input_backup, paste0(destination, "Input.RDS"))
saveRDS(pub_backup, paste0(destination, "AllPubs.RDS"))
} else {
file.copy(paste0(destination, "Input.RDS"), paste0(destination, "Input_backup.RDS"))
file.copy(paste0(destination, "AllPubs.RDS"), paste0(destination, "AllPubs_backup.RDS"))
}
status
if(status == "fail") {
input_backup <- readRDS(paste0(destination, "Input_backup.RDS"))
pub_backup <- readRDS(paste0(destination, "AllPubs_backup.RDS"))
saveRDS(input_backup, paste0(destination, "Input.RDS"))
saveRDS(pub_backup, paste0(destination, "AllPubs.RDS"))
} else {
file.copy(paste0(destination, "Input.RDS"), paste0(destination, "Input_backup.RDS"))
file.copy(paste0(destination, "AllPubs.RDS"), paste0(destination, "AllPubs_backup.RDS"))
}
if(status == "fail") {
input_backup <- readRDS(paste0(destination, "Input_backup.RDS"))
pub_backup <- readRDS(paste0(destination, "AllPubs_backup.RDS"))
saveRDS(input_backup, paste0(destination, "Input.RDS"))
saveRDS(pub_backup, paste0(destination, "AllPubs.RDS"))
} else if(status == "pass") {
file.copy(paste0(destination, "Input.RDS"), paste0(destination, "Input_backup.RDS"))
file.copy(paste0(destination, "AllPubs.RDS"), paste0(destination, "AllPubs_backup.RDS"))
}
file.copy(paste0(destination, "Input.RDS"), paste0(destination, "Input_backup.RDS"))
paste0(destination, "Input.RDS")
paste0(destination, "Input_backup.RDS")
file.copy(paste0(destination, "Input.RDS"), paste0(destination, "Input_backup.RDS"))
file.copy("data/Input.RDS", "data/Input_test.RDS")
paste0(destination, "Input.RDS"), paste0(destination, "Input_backup.RDS")
paste0(destination, "Input.RDS")
paste0(destination, "Input_backup.RDS")
file.copy(paste0(destination, "Input.RDS"), paste0(destination, "Input_backup_test.RDS"))
file.copy(paste0(destination, "Input.RDS"), paste0(destination, "Input_backup_test.RDS"), true)
file.copy(paste0(destination, "Input.RDS"), paste0(destination, "Input_backup_test.RDS"), overwrite = TRUE)
devtools::load_all()
#4. check and update inputs
finalize_update(destination)
log <- read.csv(paste0(destination, "UpdateLog.csv"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
log
new_to_log
log <- read.csv(paste0(destination, "UpdateLog.csv"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
write.csv(log, paste0(destination, "UpdateLog.csv"), quote=F, row.names=F)
log <- read.csv(paste0(destination, "UpdateLog.csv"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
str(log)
str(new_to_log)
log <- read.csv(paste0(destination, "UpdateLog.csv")) %>% mutate(Sys.Date = as.Date(Sys.Date, format = "%m/%d/%Y"))
log <- read.csv(paste0(destination, "UpdateLog.csv")) %>% dplyr::mutate(Sys.Date = as.Date(Sys.Date, format = "%m/%d/%Y"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
write.csv(log, paste0(destination, "UpdateLog.csv"), quote=F, row.names=F)
log <- read.csv(paste0(destination, "UpdateLog.csv")) %>% dplyr::mutate(Sys.Date = as.Date(Sys.Date, format = "%m/%d/%Y"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
write.csv(log, paste0(destination, "UpdateLog.csv"), quote=F, row.names=F)
log <- read.csv(paste0(destination, "UpdateLog.csv")) %>% dplyr::mutate(Sys.Date = as.Date(Sys.Date, format = "%m/%d/%Y"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
write.csv(log, paste0(destination, "UpdateLog.csv"), quote=F, row.names=F)
log <- read.csv(paste0(destination, "UpdateLog.csv")) %>% dplyr::mutate(Sys.Date = as.Date(Sys.Date, format = "%m/%d/%Y"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
write.csv(log, paste0(destination, "UpdateLog.csv"), quote=F, row.names=F)
new_to_log
log
log <- rbind(log, new_to_log)
log
write.csv(log, paste0(destination, "UpdateLog.csv"), quote=F, row.names=F)
log <- read.csv(paste0(destination, "UpdateLog.csv")) %>% dplyr::mutate(Sys.Date = as.Date(Sys.Date, format = "%m/%d/%Y"))
log
log <- read.csv(paste0(destination, "UpdateLog.csv")) %>% dplyr::mutate(Sys.Date = as.Date(Sys.Date, format = "%Y-%m-%d"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
log
write.csv(log, paste0(destination, "UpdateLog.csv"), quote=F, row.names=F)
log <- read.csv(paste0(destination, "UpdateLog.csv")) %>% dplyr::mutate(Sys.Date = as.Date(Sys.Date, format = "%Y-%m-%d"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
log
devtools::check()
input_destination <- "inputs/"
data_location <- "data/"
devtools::load_all()
#1. query
results <- query_crossref_edna(input_destination, email)
#2. filter
filtered_edna <- filter_edna_results(results, input_destination)
#3. bin
bin_filtered_results(filtered_edna, input_destination, data_location)
usethis::use_pipe()
devtools::load_all()
#3. bin
bin_filtered_results(filtered_edna, input_destination, data_location)
devtools::check()
devtools::load_all()
#3. bin
bin_filtered_results(filtered_edna, input_destination, data_location)
#4. check and update inputs
finalize_update(input_destination)
devtools::load_all()
#4. check and update inputs
finalize_update(input_destination)
status <- check_updates(input_destination)
status
status <- check_updates(input_destination)
status
if(status == "fail") {
input_backup <- readRDS(paste0(input_destination, "Input_backup.RDS"))
pub_backup <- readRDS(paste0(input_destination, "AllPubs_backup.RDS"))
saveRDS(input_backup, paste0(input_destination, "Input.RDS"))
saveRDS(pub_backup, paste0(input_destination, "AllPubs.RDS"))
} else if(status == "pass") {
file.copy(paste0(input_destination, "Input.RDS"), paste0(input_destination, "Input_backup.RDS"), overwrite = TRUE)
file.copy(paste0(input_destination, "AllPubs.RDS"), paste0(input_destination, "AllPubs_backup.RDS"), overwrite = TRUE)
}
log <- read.csv(paste0(input_destination, "UpdateLog.csv")) %>% dplyr::mutate(Sys.Date = as.Date(Sys.Date, format = "%Y-%m-%d"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
write.csv(log, paste0(input_destination, "UpdateLog.csv"), quote=F, row.names=F)
log <- read.csv(paste0(input_destination, "UpdateLog.csv")) %>% dplyr::mutate(Sys.Date = as.Date(Sys.Date, format = "%Y-%m-%d"))
new_to_log <- data.frame(Sys.Date = Sys.Date(), Status.Check = status)
log <- rbind(log, new_to_log)
write.csv(log, paste0(input_destination, "UpdateLog.csv"), quote=F, row.names=F)
devtools::check()
remotes::install_github("benjamincrary/CrossRefEDNA")
glue?
?glue
old.packages()
install.packages("glue")
install.packages("glue")
install.packages("glue")
library("glue")
help(""glue")
help("glue")
print(.libPaths())
loadNamespace("glue")
loadNamespace("glue", versionCheck = TRUE)
loadNamespace("glue", versionCheck =)
loadNamespace("glue", versionCheck)
loadNamespace("glue", versionCheck = 1.5)
loadNamespace("glue", versionCheck = "!.5")
loadNamespace("glue", versionCheck = "1.5")
loadNamespace("glue")
devtools::check()
devtools::check()
devtools::check()
